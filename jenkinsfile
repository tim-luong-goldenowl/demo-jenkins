pipeline {
    agent none

    environment {
        DOCKER_IMAGE = "thailuong/sample-node"
    }
    
    stages {
        // stage('Unit Test') {
        //     agent {
        //         docker {
        //             image 'node:lts-bullseye-slim'
        //             args '-u 0:0 -v /tmp:/root/.cache'
        //         }
        //     }
    
        //     steps {
        //         sh 'npm install'
        //         sh 'npm test'
        //     }
        // }

        stage('terraform deploy') {
           agent {
                docker {
                    withCredentials([string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'), string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')]) {
                        image 'hashicorp/terraform:1.4'
                        args  '--entrypoint="" -v /Users/goldenowl/Documents/jenkins/data/workspace/sample_node/terraform:/workpace -w /workpace -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY'
                    }
                    
                }
            }

            stages {
                stage('terraform init') {
                    steps{
                        sh 'terraform version'
                    }
                }

                // stage('terraform plan') {
                //     steps{
                //         sh 'terraform plan'
                //     }
                // }

                // stage('terraform apply') {
                //     steps{
                //         sh 'terraform apply'
                //     }
                // }
            }
        }


        // stage("build") {
        //     agent any
        //     environment {
        //         DOCKER_TAG="${GIT_BRANCH.tokenize('/').pop()}-${GIT_COMMIT.substring(0,7)}"
        //     }
        //     steps {
        //         sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} . "
        //         sh "docker image ls | grep ${DOCKER_IMAGE}"
        //         withCredentials([usernamePassword(credentialsId: 'docker hub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
        //             sh 'echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin'
        //             sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
        //         }

        //         //clean to save disk
        //         sh "docker image rm ${DOCKER_IMAGE}:${DOCKER_TAG}"
        //     }
        // }
    }
}