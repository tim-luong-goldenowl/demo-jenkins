pipeline {
    agent none

    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }

    stages {
        stage("Docker Build/Push Iamge") {
            agent any

            steps {
                script {
                    def image_name = "thailuong/sample-node:${GIT_BRANCH.tokenize('/').pop()}-${GIT_COMMIT.substring(0,7)}"
                    env.image_name = image_name
                }

                sh "docker build -t ${env.image_name} . "
                withCredentials([usernamePassword(credentialsId: 'docker hub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh "docker push ${env.image_name}"
                }

                //clean to save disk
                sh "docker image rm ${env.image_name}"
            }
        }

        stage("Terraform Deploy") {
            agent {
                docker {
                    image "hashicorp/terraform:1.4"
                    args  "--entrypoint=''  -w /workpace -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"
                }
            }

            steps {
                sh 'cp -r /var/jenkins_home/workspace/.terraform/ .terraform'
                sh 'cp /var/jenkins_home/workspace/.terraform.lock.hcl .terraform.lock.hcl'
                sh 'terraform init'
                sh "terraform apply -var='IMAGE_NAME=${env.image_name}' -auto-approve"

                script {
                    def instance_dns = sh(returnStdout: true, script: "terraform output instance_dns")
                    env.instance_dns = instance_dns
                }
            }
        }
    }

    post {
        success {
            slackSend message: "Your ${BRANCH_NAME} has been successfully deploy to ${env.instance_dns}!"
        }

        failure {
            slackSend message: "Your ${BRANCH_NAME} deployment has failed!"
        }
    }
}